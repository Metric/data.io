0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.32
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/aaronklick/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/aaronklick/.npm/dataio/0.1.0/package.tgz', '.' ]
11 verbose tarball /Users/aaronklick/.npm/dataio/0.1.0/package.tgz
12 verbose folder .
13 info prepublish dataio@0.1.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/aaronklick/.npm/1f1177db-tar.lock
16 silly lockFile 740d094e-ick-npm-dataio-0-1-0-package-tgz tar:///Users/aaronklick/.npm/dataio/0.1.0/package.tgz
17 verbose lock tar:///Users/aaronklick/.npm/dataio/0.1.0/package.tgz /Users/aaronklick/.npm/740d094e-ick-npm-dataio-0-1-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 740d094e-ick-npm-dataio-0-1-0-package-tgz tar:///Users/aaronklick/.npm/dataio/0.1.0/package.tgz
21 silly lockFile 740d094e-ick-npm-dataio-0-1-0-package-tgz tar:///Users/aaronklick/.npm/dataio/0.1.0/package.tgz
22 silly lockFile 8001fbd1-onklick-npm-dataio-0-1-0-package /Users/aaronklick/.npm/dataio/0.1.0/package
23 verbose lock /Users/aaronklick/.npm/dataio/0.1.0/package /Users/aaronklick/.npm/8001fbd1-onklick-npm-dataio-0-1-0-package.lock
24 silly lockFile 8001fbd1-onklick-npm-dataio-0-1-0-package /Users/aaronklick/.npm/dataio/0.1.0/package
25 silly lockFile 8001fbd1-onklick-npm-dataio-0-1-0-package /Users/aaronklick/.npm/dataio/0.1.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'dataio',
28 silly publish   description: 'A pure event driven websocket server. Packets are just JSON and you can easily create clients for any language!',
28 silly publish   version: '0.1.0',
28 silly publish   dependencies: { ws: '>=0.4.31', async: '>=0.9.0' },
28 silly publish   keywords: [ 'data,io,data.io,socket.io,websocket,events,web socket' ],
28 silly publish   files: [ 'lib', 'index.js' ],
28 silly publish   main: 'index.js',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   repository: { type: 'git', url: 'https://github.com/Metric/data.io' },
28 silly publish   author: { name: 'Aaron Klick', email: 'aaronklick@gmail.com' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/Metric/data.io/issues' },
28 silly publish   homepage: 'https://github.com/Metric/data.io',
28 silly publish   readme: 'Data.io\n===============\n\nNo nonsense pure event driven websocket server. With a simple data packet format that uses JSON. It is easy to create a client for any language, way easier than socket.io. You can find some pre-built ones https://github.com/metric/data.io.clients\n\nDoes not handle binary data. If you want to send binary, either base64 encode it or make sure the bytes are in a regular JavaScript Array object.\n\nDoes not queue emissions if not connected. If not connected then nothing is sent and it is ignored.\n\nIs compatible with the latest Express.js build or a regular Node.js http or https server.\n\nI tried to keep it as similar to socket.io as possible. So it would be easy to transition to it with minimal code changes.\n\nI got tired of dealing with Socket.io and the fact it was so fucking complicated to build a client for other platforms and languages. Therefore, I broke Socket.io down to its essentials. I do not need JSONP or ajax fallbacks. If your browser doesn\'t support websockets, then sorry you are out of luck. This is a pure event driven websocket server and the only overhead is parsing JSON for transmission and receiving, plus the regular websocket protocol.\n\nHow simple is the JSON packet? See for yourself\n```\n{\n  "event": "EventName",\n  "data": [...]\n}\n```\n\nEach array item in the data array corresponds to an argument in the event callback. Yep that simple.\n\nHow to Install\n===============\n\nEither download the src from here and put it in node_modules or install via npm with:\n```\nnpm install dataio\n```\n\nDependencies\n--------------\nasync and ws\n\nThese should be installed automatically if using npm. Otherwise you will need to install those via npm with:\n```\nnpm install async\nnpm install ws\n```\n\nGetting Started\n=================\n\nIt is just like socket.io on the server side.\n\n```\nvar io = require(\'dataio\');\n\nvar nio = new io(Express App || Http/Https Server || Port).on(\'connection\', function(socket) {\n  socket.on(\'whatever\', function(somedata) {\n    //do whatever\n    socket.emit(\'whatever\', somedata);\n  });\n});\n```\n\nThe DataIO object only ever has one event emitted and that is: connection. It is emitted when a new socket is connected and the socket is passed as the only argument. All other events are handled by the individual sockets.\n\nDo you need to send something to all clients at once?\n```\n// assuming you stored the DataIO object in the\n// var nio such as the above example\nnio.emit(\'whatever\', somedata);\n```\n\nThat is basically it for the server. The next section covers some finer details.\n\nAdvanced Usage\n================\n\nYou can also unsubscribe from events on a socket at will or only subscribe to an event only once.\n\nUnsubscribing from an event on a socket:\n```\n//You must have the original callback function\n//somewhere in order to remove it.\n//remember a function that uses .bind is not the same as the original function.\n//.bind wraps the function in another function.\n//So when using .bind make sure you save the .bind version in a variable\n//in case you want to remove it as a listener.\nsocket.removeListener(\'event\', originalCallbackFunction);\n```\nA more complete example of the above:\n```\nfunction MyClass(socket) {\n  this.socket = socket;\n\n  this.init = function() {\n    this.boundOnSomething = this.onSomething.bind(this);\n\n    this.socket.on(\'something\', this.boundOnSomething);\n  };\n\n  this.onSomething = function(data) {\n    ///do whatever\n    this.socket.emit(\'something\', data);\n    //Unsubscribe but with the boundOnSomething\n    this.socket.removeListener(\'something\', this.boundOnSomething);\n  };\n\n  this.init.call(this);\n}\n\nvar myclass = new MyClass(someSocket);\n```\n\nSubscribing to a socket event only once:\n```\nsocket.once(\'someEvent\', function(somedata) {\n  //this event handler will only be called once\n  //and then it will be removed automatically\n  //do something...\n});\n```\n\nDetermining if the socket is still connected:\n```\nif(socket.connected) {\n  //do something\n}\n```\n\nCommon Socket Events\n=======================\n\n1. close - emitted when the socket closes\n2. error - emitted when there is an error. An error object is the only thing passed through as an argument\n',
28 silly publish   readmeFilename: 'README.markdown',
28 silly publish   gitHead: 'b26d6488354935aec4a5a5e34d9cba76f5300ed9',
28 silly publish   _id: 'dataio@0.1.0',
28 silly publish   _shasum: '92066d151864772e036a76b2aeaeb32b89d2f588',
28 silly publish   _from: '.' }
29 verbose request where is /dataio
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 44b19a54fc4049ac
32 verbose url raw /dataio
33 verbose url resolving [ 'https://registry.npmjs.org/', './dataio' ]
34 verbose url resolved https://registry.npmjs.org/dataio
35 verbose request where is https://registry.npmjs.org/dataio
36 info trying registry request attempt 1 at 01:52:19
37 http PUT https://registry.npmjs.org/dataio
38 http 403 https://registry.npmjs.org/dataio
39 verbose headers { 'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '95',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Tue, 11 Aug 2015 06:52:20 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-ord1730-ORD',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1439275939.334038,VS0,VE1102' }
40 error publish Failed PUT 403
41 error Error: "You cannot publish over the previously published version 0.1.0." : dataio
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.4.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/aaronklick/Documents/data.io
46 error node -v v0.10.32
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
